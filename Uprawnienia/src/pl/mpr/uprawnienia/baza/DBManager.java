package pl.mpr.uprawnienia.baza;

import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;

import pl.mpr.uprawnienia.domain.Karta;
import pl.mpr.uprawnienia.domain.Pracownik;

public class DBManager {

	private Connection connection;
	private Statement statement;
	private PreparedStatement preparedStatement;

	String pracownikTableName = "pracownik";
	String kartaTableName = "karta";

	public DBManager(String dbName) throws SQLException {
		connection = DriverManager.getConnection(
				"jdbc:hsqldb:hsql://localhost/" + dbName, "SA", "");

		if (tableExists(kartaTableName) == false) {
			statement = connection.createStatement();
			statement.executeUpdate("CREATE TABLE "
							+ kartaTableName
							+ " (id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,"
							+ " numer INT, typ VARCHAR(15), id_pracownik INT);");
		}

		if (tableExists(pracownikTableName) == false) {
			statement = connection.createStatement();
			statement.executeUpdate("CREATE TABLE "
							+ pracownikTableName
							+ " (id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,"
							+ " imie VARCHAR(15), nazwisko VARCHAR(15), stanowisko VARCHAR(15));");
		}

	}

	
	boolean tableExists(String tableName) {
		try {
			DatabaseMetaData dbMetaData = connection.getMetaData();
			ResultSet rs = dbMetaData.getTables(null, null, tableName.toUpperCase(), null);
			return rs.next();
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return false;
	}

	public ArrayList<Pracownik> wczytaj() {
		
		ArrayList<Pracownik> pracownikList = new ArrayList<Pracownik>();
		
		try {
			
			statement = connection.createStatement();
			ResultSet resultSetPracownik = statement.executeQuery("SELECT id,imie,nazwisko,stanowisko FROM " + pracownikTableName + ";");
			while (resultSetPracownik.next()) {
				
				Pracownik nowy_pracownik = new Pracownik(resultSetPracownik.getInt("id"), resultSetPracownik.getString("nazwisko"), resultSetPracownik.getString("imie"), resultSetPracownik.getString("stanowisko"));
				
				preparedStatement = connection.prepareStatement("SELECT id,numer,typ FROM " + kartaTableName + " WHERE id_pracownik=?;");
				preparedStatement.setInt(1, resultSetPracownik.getInt("id"));
				ResultSet resultSetKarta = preparedStatement.executeQuery();
				ArrayList<Karta> nowa_lista_kart = new ArrayList<Karta>();
				while (resultSetKarta.next()) {
					
					Karta nowa_karta = new Karta(resultSetKarta.getInt("id"), resultSetKarta.getInt("numer"), resultSetKarta.getString("typ"));
					nowa_lista_kart.add(nowa_karta);
					
				}
				
				nowy_pracownik.setKarty_dostepu(nowa_lista_kart);
				pracownikList.add(nowy_pracownik);
				
			}
			
		} catch (SQLException e) {
			e.printStackTrace();
		}
		
		return pracownikList;
		
	}
	
	public void czyscBaze() {
		
		try {
			
			statement = connection.createStatement();
			statement.execute("DELETE FROM " + pracownikTableName);
			statement.execute("DELETE FROM " + kartaTableName);
			
		} catch (SQLException e) {
			e.printStackTrace();
		}
		
	}
	public void zapiszPracownika(Pracownik pracownik) {
		
		try {
			
			preparedStatement = connection.prepareStatement("INSERT INTO " + pracownikTableName + " (imie,nazwisko,stanowisko) VALUES (?,?,?)");
			preparedStatement.setString(1, pracownik.getImie());
			preparedStatement.setString(2, pracownik.getNazwisko());
			preparedStatement.setString(3, pracownik.getStanowisko());
			preparedStatement.execute();
			
		} catch (SQLException e) {
			e.printStackTrace();
		}
		
	}
	
	public void usunPracownika(Pracownik pracownik) {
		
		try {
			
			preparedStatement = connection.prepareStatement("SELECT id FROM " + pracownikTableName + " WHERE imie=? AND nazwisko=? AND stanowisko=?;");
			preparedStatement.setString(1, pracownik.getImie());
			preparedStatement.setString(2, pracownik.getNazwisko());
			preparedStatement.setString(3, pracownik.getStanowisko());
			ResultSet resultSet = preparedStatement.executeQuery();

			int id = -1;
			while (resultSet.next()) {
				id = resultSet.getInt("id");
			}
			
			if (id != -1) {
				preparedStatement = connection.prepareStatement("DELETE FROM " + pracownikTableName + " WHERE id=?;");
				preparedStatement.setInt(1, id);
				preparedStatement.execute();
				
				preparedStatement = connection.prepareStatement("DELETE FROM " + kartaTableName + " WHERE id_pracownik=?;");
				preparedStatement.setInt(1, id);
				preparedStatement.execute();
			}

		} catch (SQLException e) {
			e.printStackTrace();
		}
		
	}
	
	public void zapiszKarte(Karta karta, Pracownik pracownik) {
		
		try {
			
			preparedStatement = connection.prepareStatement("SELECT id FROM " + pracownikTableName + " WHERE imie=? AND nazwisko=? AND stanowisko=?;");
			preparedStatement.setString(1, pracownik.getImie());
			preparedStatement.setString(2, pracownik.getNazwisko());
			preparedStatement.setString(3, pracownik.getStanowisko());
			ResultSet resultSet = preparedStatement.executeQuery();

			int id = -1;
			while (resultSet.next()) {
				id = resultSet.getInt("id");
			}
			
			preparedStatement = connection.prepareStatement("INSERT INTO " + kartaTableName + " (numer,typ,id_pracownik) VALUES (?,?,?)");
			preparedStatement.setInt(1, karta.getNumer());
			preparedStatement.setString(2, karta.getTyp());
			preparedStatement.setInt(3, id);
			preparedStatement.execute();
			
		} catch (SQLException e) {
			e.printStackTrace();
		}
		
	}
	
	public void usunKarte(Karta karta) {
		
		try {
			
			preparedStatement = connection.prepareStatement("DELETE FROM " + kartaTableName + " WHERE numer=? AND typ=?;");
			preparedStatement.setInt(1, karta.getNumer());
			preparedStatement.setString(2, karta.getTyp());
			preparedStatement.execute();
			
		} catch (SQLException e) {
			e.printStackTrace();
		}
		
	}
	
}

